module single_port_ram
    #(parameter DATA_WIDTH = 32, parameter ADDR_WIDTH = 6)
    (
    input clk,                      // Clock signal
    input we,                       // Write enable signal (1 = write, 0 = read)
    input [(ADDR_WIDTH-1):0] addr,   // Address input
    input [(DATA_WIDTH-1):0] data_in, // Data input (used for writing)
    output reg [(DATA_WIDTH-1):0] data_out // Data output (used for reading)
    );

    // Declare memory storage
    reg [DATA_WIDTH-1:0] ram [2**ADDR_WIDTH-1:0];

    always @(posedge clk) begin
        if (we) begin
            ram[addr] <= data_in; // Write data to memory
        end else begin
            data_out <= ram[addr]; // Read data from memory
        end
    end
endmodule
