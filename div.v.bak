module div (
    input wire [31:0] dividend,  // Dividend (Q)
    input wire [31:0] divisor,   // Divisor (M)
    output reg [31:0] quotient,  // Quotient (Q)
    output reg [31:0] remainder, // Remainder (A)
	 output reg [63:0] Result 
    output reg valid             // Indicates when computation is complete
);

    // Internal registers
    reg [31:0] A;                // Accumulator
    reg [31:0] Q;                // Quotient register
    reg [31:0] M;                // Divisor register
    reg [5:0] count;             // Counter for 32 iterations

    always @(*) begin
        // Initialize registers
        A = 32'b0;               // Clear accumulator
        Q = dividend;            // Load dividend into Q
        M = divisor;             // Load divisor into M
        count = 6'd32;           // Set counter for 32 iterations
        valid = 1'b0;            // Clear valid flag

        while (count > 0) begin
            // Shift left {A, Q}
            A = {A[30:0], Q[31]};
            Q = {Q[30:0], 1'b0};

            // Subtract M from A
            A = A - M;

            if (A[31]) begin
                // If result is negative, restore A and set LSB of Q to 0
                A = A + M;
                Q[0] = 1'b0;
            end else begin
                // If result is positive, set LSB of Q to 1
                Q[0] = 1'b1;
            end

            count = count - 1;   // Decrement counter
        end

	// Division complete after all bits are processed
	quotient = Q;
	remainder = A;
	valid = 1'b1;            // Set valid flag to indicate completion
	Result = {A, Q}
    end
endmodule
