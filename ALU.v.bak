module ALU (
    input wire [31:0] IR,            // Instruction Register containing the opcode and operands
    input wire [31:0] R0, R1, R2, R3, R4, R5, R6,
	 R7, R8, R9, R10, R11, R12, R13, R14, R15,// Array of 16 registers (R0 to R15)
    output reg [31:0] Result         // Output of the ALU
);

    // Extract fields from IR
    wire [4:0] ALU_Control = IR[31:27]; // Opcode
    wire [3:0] Ra = IR[26:23];          // Destination register (not used here)
    wire [3:0] Rb = IR[22:19];          // Source register B
    wire [3:0] Rc = IR[18:15];          // Source register C

    // ALU Inputs
    wire [31:0] A = (Rb == 4'b0000) ? R0 :
                    (Rb == 4'b0001) ? R1 :
                    (Rb == 4'b0010) ? R2 :
                    (Rb == 4'b0011) ? R3 :
                    (Rb == 4'b0100) ? R4 :
                    (Rb == 4'b0101) ? R5 :
                    (Rb == 4'b0110) ? R6 :
                    (Rb == 4'b0111) ? R7 :
                    (Rb == 4'b1000) ? R8 :
                    (Rb == 4'b1001) ? R9 :
                    (Rb == 4'b1010) ? R10 :
                    (Rb == 4'b1011) ? R11 :
                    (Rb == 4'b1100) ? R12 :
                    (Rb == 4'b1101) ? R13 :
                    (Rb == 4'b1110) ? R14 :
                    R15;

    wire [31:0] B = (Rc == 4'b0000) ? R0 :
                    (Rc == 4'b0001) ? R1 :
                    (Rc == 4'b0010) ? R2 :
                    (Rc == 4'b0011) ? R3 :
                    (Rc == 4'b0100) ? R4 :
                    (Rc == 4'b0101) ? R5 :
                    (Rc == 4'b0110) ? R6 :
                    (Rc == 4'b0111) ? R7 :
                    (Rc == 4'b1000) ? R8 :
                    (Rc == 4'b1001) ? R9 :
                    (Rc == 4'b1010) ? R10 :
                    (Rc == 4'b1011) ? R11 :
                    (Rc == 4'b1100) ? R12 :
                    (Rc == 4'b1101) ? R13 :
                    (Rc == 4'b1110) ? R14 :
                    R15;       // Data from source register Rc

    // Always block to evaluate based on ALU_Control
	 
	 adder add(
	 .A(A),
	 .B(B),
	 .Result(AdderResult)
	 );
	 
	 BoothMul Mul(
	 .M(A),
	 .Q(B),
	 .P(ProductResult)
	 );
	 
     always @(*) begin
        case (ALU_Control)
            5'b00101: Result = A & B;                                         // AND operation
            5'b00110: Result = A | B;                                         // OR operation
            5'b10010: Result = ~A;                                            // NOT operation (only uses A)
            5'b00011: Result = AdderResult;
            5'b00100: Result = A - B;                                         // SUB operation
            5'b10000: Result = ProductResult;
            5'b01111: begin                                                   // DIV operation (Quotient only, remainder ignored)
                if (B != 0) 
                    Result = A / B;
                else 
                    Result = 32'b0;                                           // Handle divide-by-zero as zero result
            end
            5'b01001: Result = A >> B;                                        // SHR (Logical Shift Right)
            5'b01010: Result = $signed(A) >>> B;                              // SHRA (Arithmetic Shift Right)
            5'b01011: Result = A << B;                                        // SHL (Logical Shift Left)
            5'b00111: Result = (A >> B) | (A << (32 - B));                    // ROR (Rotate Right)
            5'b01000: Result = (A << B) | (A >> (32 - B));                    // ROL (Rotate Left)
            default: Result = 32'b0;                                          // Default case (no operation)
        endcase
    end

endmodule
